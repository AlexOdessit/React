{"ast":null,"code":"var _jsxFileName = \"/home/alex/Public/React/myslider/src/components/Cards/index.jsx\";\nimport React from 'react';\nimport styles from './Cards.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Cards = ({\n  products: cards,\n  isLoading,\n  isError\n}) => {\n  console.log(cards, isLoading, isError);\n  if (Array.isArray(cards)) {\n    alert('array');\n  } else {\n    alert('empty'); // or handle the case when cards is not an array\n  }\n  const cardList = cards.map(card => /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: card.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: card.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: card.thumbnail,\n      alt: card.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, card.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.loading,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.error,\n      children: \"Error...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 19\n    }, this), cards.length === 0 && !isLoading && !isError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.empty,\n      children: \"No cards available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), cardList]\n  }, void 0, true);\n};\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Cards","products","cards","isLoading","isError","console","log","Array","isArray","alert","cardList","map","card","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","description","src","thumbnail","alt","id","loading","error","length","empty","_c","$RefreshReg$"],"sources":["/home/alex/Public/React/myslider/src/components/Cards/index.jsx"],"sourcesContent":["import React from 'react';\nimport styles from './Cards.module.css';\n\nconst Cards = ({ products: cards, isLoading, isError }) => {\n  console.log(cards, isLoading, isError);\n  if (Array.isArray(cards)) {\n    alert('array');\n  } else {\n    alert('empty'); // or handle the case when cards is not an array\n  }\n\n  const cardList = cards.map((card) => (\n    <article key={card.id} className='card'>\n      <h2>{card.title}</h2>\n      <p>{card.description}</p>\n      <img src={card.thumbnail} alt={card.title} />\n    </article>\n  ));\n  return (\n    <>\n      {isLoading && <h3 className={styles.loading}>Loading...</h3>}\n      {isError && <h3 className={styles.error}>Error...</h3>}\n      {cards.length === 0 && !isLoading && !isError && (\n        <p className={styles.empty}>No cards available.</p>\n      )}\n      {cardList}\n    </>\n  );\n};\n\nexport default Cards;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,KAAK,GAAGA,CAAC;EAAEC,QAAQ,EAAEC,KAAK;EAAEC,SAAS;EAAEC;AAAQ,CAAC,KAAK;EACzDC,OAAO,CAACC,GAAG,CAACJ,KAAK,EAAEC,SAAS,EAAEC,OAAO,CAAC;EACtC,IAAIG,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE;IACxBO,KAAK,CAAC,OAAO,CAAC;EAChB,CAAC,MAAM;IACLA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;EAClB;EAEA,MAAMC,QAAQ,GAAGR,KAAK,CAACS,GAAG,CAAEC,IAAI,iBAC9Bf,OAAA;IAAuBgB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACrCjB,OAAA;MAAAiB,QAAA,EAAKF,IAAI,CAACG;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrBtB,OAAA;MAAAiB,QAAA,EAAIF,IAAI,CAACQ;IAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBtB,OAAA;MAAKwB,GAAG,EAAET,IAAI,CAACU,SAAU;MAACC,GAAG,EAAEX,IAAI,CAACG;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,GAHjCP,IAAI,CAACY,EAAE;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIZ,CACV,CAAC;EACF,oBACEtB,OAAA,CAAAE,SAAA;IAAAe,QAAA,GACGX,SAAS,iBAAIN,OAAA;MAAIgB,SAAS,EAAElB,MAAM,CAAC8B,OAAQ;MAAAX,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC3Df,OAAO,iBAAIP,OAAA;MAAIgB,SAAS,EAAElB,MAAM,CAAC+B,KAAM;MAAAZ,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrDjB,KAAK,CAACyB,MAAM,KAAK,CAAC,IAAI,CAACxB,SAAS,IAAI,CAACC,OAAO,iBAC3CP,OAAA;MAAGgB,SAAS,EAAElB,MAAM,CAACiC,KAAM;MAAAd,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACnD,EACAT,QAAQ;EAAA,eACT,CAAC;AAEP,CAAC;AAACmB,EAAA,GAzBI7B,KAAK;AA2BX,eAAeA,KAAK;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}